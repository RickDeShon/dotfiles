;;; .emacs --- geo's emacs
;;; Commentary:

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(battery-mode-line-limit 90)
 '(coffee-tab-width 2)
 '(custom-enabled-themes (quote (geo-dark)))
 '(custom-safe-themes
   (quote
    ("f380fd03bab460c7ab257896fcf13c54052e6258bdb54e54246fd07e4923273b" "5a7830712d709a4fc128a7998b7fa963f37e960fd2e8aa75c76f692b36e6cf3c" "50e7f9d112e821e42bd2b8410d50de966c35c7434dec12ddea99cb05dd368dd8" "e1551b5516e0a439b6ab019ba00cee866e735f66f22ff67a5d882ad0f1383454" "e34496b6cb6d1364616a0c2e41d41648648c1d950af82a30858901a0a1c6805a" "59f28152c20630fb2f7d414020d21ede9444a138fdedee53a77ecdb7f3ed48a0" "8eeb8a60d588af66fca1be07913faf722c165c48904cd4cf45d7c11cca94ff11" "3b2ecfa8cb375377f8906d77fa59aa11bcbb1fdabbf362b8e8e6d58ca657be9f" "90c7657ca7ae586bff992e8ce2d20447dd343ef235f25cf4e4b228969750d66b" "8389282278e6febad73d5889c959a408053e42750d79bffd238ce641d7e5da49" "a0c61e07ac38bec833186b8f6b82caa005b00250d375bc410f0dd99de456cf63" "e0d6bf68ed6b52d6b4b22b4d7f1d09235c0cd96a9edfe12a67cfeed183d0a6f1" "fb417dca72f9b08777194a9e3a5b86da29dc42972194f91ed5aff4ef81c3c54b" "24acd771fd56cd61bd12732f2772275429f9d75bc12bc9f0bd3a268fddb6a645" "3f873e7cb090efbdceafb8f54afed391899172dd917bb7a354737a8bb048bd71" "3a3917dbcc6571ef3942c2bf4c4240f70b5c4bc0b28192be6d3f9acd83607a24" "a27c00821ccfd5a78b01e4f35dc056706dd9ede09a8b90c6955ae6a390eb1c1e" "38b536cbb5b15ae65c2d5a9a4d2e8deff9291a99ed6ab67cf51cf6a8b02b83ad" "a55ef8d8cb330dd324b70935dd1f41996ae7d892a9dd468596b156d216fda7e1" default)))
 '(display-time-24hr-format t)
 '(display-time-default-load-average nil)
 '(display-time-mode t)
 '(initial-buffer-choice t)
 '(js-indent-level 2)
 '(js2-mode-show-strict-warnings nil)
 '(js2-strict-inconsistent-return-warning nil)
 '(json-reformat:indent-width 2)
 '(package-selected-packages
   (quote
    (adoc-mode all-the-icons-dired diminish spaceline spaceline-all-the-icons powerline powerline-evil go-mode flycheck-color-mode-line flycheck-credo flycheck-dialyzer lua-mode magithub rspec-mode writeroom-mode twilight-bright-theme zoom-frm yasnippet yaml-mode which-key web-mode smex smart-mode-line slim-mode sass-mode ruby-refactor ruby-end robe paradox markdown-mode ledger-mode keychain-environment json-mode js2-mode helm-rails helm-projectile helm-dash helm-ag git-timemachine geo-light-2-theme flycheck-elixir flx-ido exec-path-from-shell evil-rails evil-org evil-matchit evil-magit elixir-mix drag-stuff discover-my-major discover coffee-mode base16-theme alchemist ag)))
 '(paradox-github-token t)
 '(projectile-mode-line (quote (:eval (format " P[%s]" (projectile-project-name)))))
 '(show-paren-mode t)
 '(sml/mule-info nil)
 '(sml/theme nil)
 '(standard-indent 2)
 '(web-mode-code-indent-offset 2)
 '(web-mode-css-indent-offset 2)
 '(web-mode-markup-indent-offset 2)
 '(web-mode-sql-indent-offset 2))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:family "PragmataPro" :foundry "nil" :slant normal :weight normal :height 141 :width normal))))
 '(flycheck-color-mode-line-error-face ((t (:background "black" :foreground "red" :weight normal))))
 '(flycheck-color-mode-line-info-face ((t (:inherit flycheck-fringe-info :weight normal))))
 '(flycheck-color-mode-line-warning-face ((t (:inherit flycheck-fringe-warning :weight normal)))))



; https://github.com/syl20bnr/spacemacs/blob/develop/doc/FAQ.org#why-is-spacemacs-hanging-on-startup
; setting this reduces laughingly slow startup times
(setq tramp-ssh-controlmaster-options "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no")

; list the packages you want
(setq package-list '(evil
                     evil-magit
                     evil-matchit
                     evil-org
                     evil-rails
                     paradox
                     yasnippet
                     js2-mode
                     sass-mode
                     web-mode
                     json-mode
                     slim-mode
                     helm
                     helm-rails
                     helm-ag
                     helm-projectile
                     flycheck
                     magit
                     exec-path-from-shell
                     discover
                     discover-my-major
                     projectile
                     projectile-rails
                     ruby-refactor
                     ruby-end
                     rspec-mode
                     elixir-mode
                     base16-theme
                     alchemist
                     flx-ido
                     smart-mode-line
                     git-timemachine
                     smex
                     robe
                     markdown-mode
                     which-key
                     ledger-mode
                     spaceline
                     diminish
                     ))

; list the repositories containing them
(setq package-archives '(("melpa" . "http://melpa.org/packages/")
                         ("elpa" . "http://tromey.com/elpa/")
                         ("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")))

; activate all the packages (in particular autoloads)
(package-initialize)
(add-to-list 'load-path "~/.emacs.d/lisp")

; fetch the list of packages available
(unless package-archive-contents
  (package-refresh-contents))
(or (file-exists-p package-user-dir) (package-refresh-contents))

; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))

(exec-path-from-shell-initialize)

;## Evil
(setq evil-shift-width 2)
(setq evil-want-C-u-scroll t)
(require 'evil)
(evil-mode 1)
(define-key evil-normal-state-map ";" 'evil-ex) ; Use ; instead of :
(define-key evil-normal-state-map ":" 'evil-repeat-find-char) ; Use ; as :
(define-key evil-normal-state-map "," ctl-x-map) ; Use , as "leader" (C-x)
(define-key evil-normal-state-map " " ctl-x-map) ; Use SPC as "leader" (C-x)
;(define-key evil-normal-state-map (kbd "<tab>") 'evil-indent) ; Use TAB to correct indentation

;;; yasnippet
(setq yas-snippet-dirs
      '("~/bin/dotfiles/emacs/snippets"
        ))
(yas-global-mode 1)

;## Projectile
(projectile-global-mode)
(add-hook 'projectile-mode-hook 'projectile-rails-on)
(require 'helm-projectile)
(helm-projectile-on)

;## JS2
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.jsx?\\'" . js2-jsx-mode))

;## sass
(require 'sass-mode)

;## web-mode
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

;## Helm
(require 'helm-config)
(global-set-key (kbd "M-i") 'helm-imenu)

;; The default `C-x c` is quite close to `C-x C-c` which quits Emacs.
;; Changed to `C-c h`. Note: We must set `C-c h` globaly because we
;; cannot change `helm-command-prefix-key` once `helm-config` is loaded.
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))
(global-set-key (kbd "M-x")                          'undefined)
(global-set-key (kbd "M-x")                          'helm-M-x)
(global-set-key (kbd "C-x r b")                      'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f")                      'helm-find-files)

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t)

(helm-mode 1)

;## Flycheck
(require 'flycheck)
(add-hook 'after-init-hook #'global-flycheck-mode)
;; (flycheck-add-mode 'javascript-eslint 'web-mode)
;; disable jshint since we prefer eslint checking
;; (setq-default flycheck-disabled-checkers
;;   (append flycheck-disabled-checkers
;;     '(javascript-jshint)))
; (require 'flycheck-color-mode-line)
; (eval-after-load "flycheck"
;   '(add-hook 'flycheck-mode-hook 'flycheck-color-mode-line-mode))

;## Ruby-refactor
(add-hook 'ruby-mode-hook 'ruby-refactor-mode-launch)

;; Ruby
;; treat _ as part of a single word
(add-hook 'ruby-mode-hook
          (lambda () (modify-syntax-entry ?_ "w")))

;## Magit
(global-set-key (kbd "C-x g") 'magit-status)
(require 'evil-magit)

;## Discover my mode
(global-set-key (kbd "C-h C-m") 'discover-my-major)
(global-set-key (kbd "C-h M-m") 'discover-my-mode)

;## Ag
;(define-key evil-normal-state-map (ctl-x-map (kbd "/")) 'helm-do-ag-project-root)

;## Evil rails
(defgroup evil-rails nil
  "Evil Rails customizations."
  :prefix "evil-rails-"
  :group 'evil-rails)

;## Ido
(ido-mode 1)
(setq ido-everywhere t)
(setq ido-enable-flex-matching t)

;## Smart mode line
; (sml/setup)
; (add-to-list 'rm-excluded-modes " WK")
; (add-to-list 'rm-excluded-modes " ARev")
; (add-to-list 'rm-excluded-modes " Undo-Tree")
; (add-to-list 'rm-excluded-modes " end")
; (add-to-list 'rm-excluded-modes " RubyRef")
; (add-to-list 'rm-excluded-modes " robe")
; (add-to-list 'rm-excluded-modes " yas")
; (add-to-list 'rm-excluded-modes " FlyC")
; (add-to-list 'rm-excluded-modes " Helm")

;## Robe
(add-hook 'ruby-mode-hook 'robe-mode)

(which-key-mode)

;; Ledger
(add-to-list 'load-path (expand-file-name "/usr/local/share/emacs/site-list/"))
(add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode))

;; Zoom-frm
(require 'zoom-frm)

(setq apropos-sort-by-scores t)

(menu-bar-mode -1)
(tool-bar-mode -1)
(setq ns-use-native-fullscreen nil)
(scroll-bar-mode -1)
;(toggle-frame-fullscreen) ; can't get it to not use native full screen

(require 'elixir-mode)
; ;; Use ruby-end-mode with elixir files
; (add-to-list 'elixir-mode-hook
;              (defun auto-activate-ruby-end-mode-for-elixir-mode ()
;                (set (make-variable-buffer-local 'ruby-end-expand-keywords-before-re)
;                     "\\(?:^\\|\\s-+\\)\\(?:do\\)")
;                (set (make-variable-buffer-local 'ruby-end-check-statement-modifiers) nil)
;                (ruby-end-mode +1)))

(keychain-refresh-environment)

;#################
;## KEYBINDINGS ##
(global-set-key (kbd "M-o") 'other-window)
(global-set-key (kbd "M-u") 'universal-argument)
(global-set-key (kbd "M--") 'zoom-out)
(global-set-key (kbd "M-+") 'zoom-in)
;(global-set-key (kbd "M-i") 'imenu)

(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(fset 'yes-or-no-p 'y-or-n-p) ; make prompts y/n instead of yes/no
(setq confirm-nonexistent-file-or-buffer nil) ; don't warn if a file doesn't exist when opening
(tooltip-mode -1)               ; Use the echo area for tooltips
(setq tooltip-use-echo-area t)  ; Use the echo area for tooltips
(setq redisplay-dont-pause t)   ; fully redraw before processing input events
(setq show-trailing-whitespace t)
;(setq visible-bell t) ; TURN OFF THE BEEPING!
(setq ring-bell-function 'ignore) ; IGNORE ALL THE BELLS!
(setq blink-cursor-blinks 0) ; blink cursor forever
(setq global-hl-line-mode t) ; highlight current row
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq system-uses-terminfo nil) ; fixes 4m in term sessions
(mac-auto-operator-composition-mode t)
(show-paren-mode t)

(setq mac-option-modifier 'super) ; make opt key do Super

; # use M-<up> and M-<down> to move lines up and down
(defun move-line-up ()
  (interactive)
  (transpose-lines 1)
  (forward-line -2))

(defun move-line-down ()
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1))

(global-set-key (kbd "M-<up>") 'move-line-up)
(global-set-key (kbd "M-<down>") 'move-line-down)
; ####################################################

; (require 'powerline)
; (powerline-centee-evil-theme)

(require 'spaceline)
(require 'spaceline-config)
(spaceline-spacemacs-theme)
(spaceline-helm-mode)
(spaceline-toggle-buffer-size-off)
(spaceline-toggle-buffer-encoding-abbrev-off)

(require 'diminish)
(diminish 'ruby-end-mode)
(diminish 'which-key-mode)
(diminish 'yas-minor-mode)
(diminish 'undo-tree-mode)
(diminish 'robe-mode)
(diminish 'auto-revert-mode)
(diminish 'helm-mode)
(diminish 'flycheck-mode)
(diminish 'ruby-refactor-mode "Refact")

(require 'alchemist)
(add-to-list 'elixir-mode-hook 'alchemist-mode)

(require 'prettier-js)
(setq prettier-target-mode "js2-mode")
(setq prettier-target-mode "js2-jsx-mode")
(add-hook 'js2-mode-hook
          '(lambda ()
                  (add-hook 'before-save-hook 'prettier-before-save)))
(setq prettier-args '(
  "--semi" "false"))

(add-to-list 'auto-mode-alist (cons "\\.adoc\\'" 'adoc-mode))